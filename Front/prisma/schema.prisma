generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSGRES_URL")
}

model Account {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @db.Uuid @map("user_id")
  type                 String
  provider             String
  providerAccountId    String @map("provider_account_id")
  refresh_token        String? @db.Text
  access_token         String? @db.Text
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?  @db.Text
  session_state        String?

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @db.Uuid @map("user_id")
  expires       DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @map("updated_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model User {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active                Boolean     @default(false)
  subscribtionPlan      String?     @map("subscribtion_plan")
  stripeCustomerId      String?     @unique @map("stripe_customer_id")
  stripeSubscribtionId  String?     @unique @map("stripe_subscribtion_id")
  username              String?     @unique
  password              String?
  email                 String      @unique
  updatedEmail          String?     @map("updated_email")
  role                  String      @default("user")
  image                 String?
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @default(now()) @map("updated_at")
  account               Account[]
  session               Session[]
  activateTokens        ActivateToken[]
  passwordResetToken    PasswordResetToken[]

  @@map("user")
}

model ActivateToken {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token       String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  activatedAt DateTime? @map("activated_at")
  userId      String    @map("user_id")
  isValid     Boolean   @map("is_valid") @default(true) 

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("activate_token")
}

model PasswordResetToken {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token       String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  resetAt     DateTime? @map("reset_at")
  userId      String    @map("user_id")
  isValid     Boolean   @map("is_valid") @default(true) 

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("password_reset_token")
}
